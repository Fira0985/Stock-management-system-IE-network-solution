generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLERK
  AUDITOR
  CUSTOMER
  SUPPLIER
}

enum SaleType {
  CASH
  CREDIT
}

enum PaymentStatus {
  PAID
  PARTIAL
  UNPAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CHEQUE
  TRANSFER
  CARD
  OTHER
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String
  barcode        String   @unique
  unit           String
  image_url      String?
  sale_price     Float
  cost_price     Float
  category       Category @relation(fields: [category_id], references: [id])
  category_id    Int
  created_by     User     @relation("ProductCreatedBy", fields: [created_by_id], references: [id])
  created_by_id  Int
  deleted_by     User?    @relation("ProductDeletedBy", fields: [deleted_by_id], references: [id])
  deleted_by_id  Int?
  created_at     DateTime @default(now())
  deleted_at     DateTime?
  archived       Boolean  @default(false)

  saleItems      SaleItem[]
  purchaseItems  PurchaseItem[]

  @@map("product")
}

model Category {
  id             Int      @id @default(autoincrement())
  name           String
  created_by     User     @relation("CategoryCreatedBy", fields: [created_by_id], references: [id])
  created_by_id  Int
  deleted_by     User?    @relation("CategoryDeletedBy", fields: [deleted_by_id], references: [id])
  deleted_by_id  Int?
  created_at     DateTime @default(now())
  deleted_at     DateTime?
  archived       Boolean  @default(false)

  products       Product[]

  @@map("category")
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique
  role                Role
  password_hash       String?
  phone               String?
  address             String?
  credit_limit        Float?
  created_by_id       Int?
  created_by          User?     @relation("UserCreatedBy", fields: [created_by_id], references: [id])
  deleted_by_id       Int?
  deleted_by          User?     @relation("UserDeletedBy", fields: [deleted_by_id], references: [id])
  created_at          DateTime  @default(now())
  deleted_at          DateTime?
  archived            Boolean   @default(false)

  // Relations
  productsCreated     Product[] @relation("ProductCreatedBy")
  productsDeleted     Product[] @relation("ProductDeletedBy")
  categoriesCreated   Category[] @relation("CategoryCreatedBy")
  categoriesDeleted   Category[] @relation("CategoryDeletedBy")
  usersCreated        User[]    @relation("UserCreatedBy")
  usersDeleted        User[]    @relation("UserDeletedBy")

  salesAsCustomer     Sale[]    @relation("SaleCustomer")
  salesCreated        Sale[]    @relation("SaleCreatedBy")
  salesDeleted        Sale[]    @relation("SaleDeletedBy")

  purchasesAsSupplier Purchase[] @relation("PurchaseSupplier")
  purchasesCreated    Purchase[] @relation("PurchaseCreatedBy")
  purchasesDeleted    Purchase[] @relation("PurchaseDeletedBy")

  paymentsReceived    Payment[] @relation("PaymentReceivedBy")

  @@map("user")
}

model Sale {
  id               Int           @id @default(autoincrement())
  type             SaleType
  total            Float
  discount_amount  Float
  paid_amount      Float         @default(0)
  balance_due      Float         @default(0)
  credit           Float?        // originally requested on credit
  due_date         DateTime?
  is_fully_paid    Boolean       @default(false)
  payment_status   PaymentStatus @default(UNPAID)

  customer         User          @relation("SaleCustomer", fields: [customer_id], references: [id])
  customer_id      Int
  created_by       User          @relation("SaleCreatedBy", fields: [created_by_id], references: [id])
  created_by_id    Int
  deleted_by       User?         @relation("SaleDeletedBy", fields: [deleted_by_id], references: [id])
  deleted_by_id    Int?
  created_at       DateTime      @default(now())
  deleted_at       DateTime?
  archived         Boolean       @default(false)

  items            SaleItem[]
  payments         Payment[]

  @@map("sale")
}

model SaleItem {
  id           Int      @id @default(autoincrement())
  sale         Sale     @relation(fields: [sale_id], references: [id])
  sale_id      Int
  product      Product  @relation(fields: [product_id], references: [id])
  product_id   Int
  quantity     Int
  unit_price   Float
  archived     Boolean  @default(false)

  @@map("sale_item")
}

model Payment {
  id              Int            @id @default(autoincrement())
  amount          Float
  paid_at         DateTime       @default(now())
  method          PaymentMethod  @default(CASH)
  note            String?

  sale            Sale           @relation(fields: [sale_id], references: [id])
  sale_id         Int
  received_by     User           @relation("PaymentReceivedBy", fields: [received_by_id], references: [id])
  received_by_id  Int

  @@map("payment")
}

model Purchase {
  id             Int       @id @default(autoincrement())
  supplier       User      @relation("PurchaseSupplier", fields: [supplier_id], references: [id])
  supplier_id    Int
  created_by     User      @relation("PurchaseCreatedBy", fields: [created_by_id], references: [id])
  created_by_id  Int
  deleted_by     User?     @relation("PurchaseDeletedBy", fields: [deleted_by_id], references: [id])
  deleted_by_id  Int?
  created_at     DateTime  @default(now())
  deleted_at     DateTime?
  archived       Boolean   @default(false)

  items          PurchaseItem[]

  @@map("purchase")
}

model PurchaseItem {
  id            Int       @id @default(autoincrement())
  purchase      Purchase  @relation(fields: [purchase_id], references: [id])
  purchase_id   Int
  product       Product   @relation(fields: [product_id], references: [id])
  product_id    Int
  quantity      Int
  cost_price    Float
  archived      Boolean   @default(false)

  @@map("purchase_item")
}
